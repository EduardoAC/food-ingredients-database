/**
 * Generated by orval v7.12.2 🍺
 * Do not edit manually.
 * Food Data Central API
 * The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.
  To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.
  
  Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)
 * OpenAPI spec version: 1.0.1
 */
import type {
  AbridgedFoodItem,
  FoodListCriteria,
  FoodSearchCriteria,
  FoodsCriteria,
  GetFood200,
  GetFoodParams,
  GetFoods200Item,
  GetFoodsListParams,
  GetFoodsParams,
  GetFoodsSearchParams,
  PostFoods200Item,
  SearchResult
} from '.././model'

import { customFetch } from '../../customFetch'

/**
 * Retrieves a single food item by an FDC ID. Optional format and nutrients can be specified.
 * @summary Fetches details for one food item by FDC ID
 */
export type getFoodResponse200 = {
  data: GetFood200
  status: 200
}

export type getFoodResponse400 = {
  data: void
  status: 400
}

export type getFoodResponse404 = {
  data: void
  status: 404
}

export type getFoodResponseSuccess = getFoodResponse200 & {
  headers: Headers
}
export type getFoodResponseError = (getFoodResponse400 | getFoodResponse404) & {
  headers: Headers
}

export type getFoodResponse = getFoodResponseSuccess | getFoodResponseError

export const getGetFoodUrl = (fdcId: string, params?: GetFoodParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    const explodeParameters = ['nutrients']

    if (Array.isArray(value) && explodeParameters.includes(key)) {
      value.forEach((v) =>
        normalizedParams.append(key, v === null ? 'null' : v.toString())
      )
      return
    }

    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `https://api.nal.usda.gov/fdc/v1/food/${fdcId}?${stringifiedParams}`
    : `https://api.nal.usda.gov/fdc/v1/food/${fdcId}`
}

export const getFood = async (
  fdcId: string,
  params?: GetFoodParams,
  options?: RequestInit
): Promise<getFoodResponse> => {
  return customFetch<getFoodResponse>(getGetFoodUrl(fdcId, params), {
    ...options,
    method: 'GET'
  })
}

/**
 * Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID's or ones that are not found are omitted and an empty set is returned if there are no matches.
 * @summary Fetches details for multiple food items using input FDC IDs
 */
export type getFoodsResponse200 = {
  data: GetFoods200Item[]
  status: 200
}

export type getFoodsResponse400 = {
  data: void
  status: 400
}

export type getFoodsResponseSuccess = getFoodsResponse200 & {
  headers: Headers
}
export type getFoodsResponseError = getFoodsResponse400 & {
  headers: Headers
}

export type getFoodsResponse = getFoodsResponseSuccess | getFoodsResponseError

export const getGetFoodsUrl = (params: GetFoodsParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    const explodeParameters = ['fdcIds', 'nutrients']

    if (Array.isArray(value) && explodeParameters.includes(key)) {
      value.forEach((v) =>
        normalizedParams.append(key, v === null ? 'null' : v.toString())
      )
      return
    }

    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `https://api.nal.usda.gov/fdc/v1/foods?${stringifiedParams}`
    : `https://api.nal.usda.gov/fdc/v1/foods`
}

export const getFoods = async (
  params: GetFoodsParams,
  options?: RequestInit
): Promise<getFoodsResponse> => {
  return customFetch<getFoodsResponse>(getGetFoodsUrl(params), {
    ...options,
    method: 'GET'
  })
}

/**
 * Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID's or ones that are not found are omitted and an empty set is returned if there are no matches.
 * @summary Fetches details for multiple food items using input FDC IDs
 */
export type postFoodsResponse200 = {
  data: PostFoods200Item[]
  status: 200
}

export type postFoodsResponse400 = {
  data: void
  status: 400
}

export type postFoodsResponseSuccess = postFoodsResponse200 & {
  headers: Headers
}
export type postFoodsResponseError = postFoodsResponse400 & {
  headers: Headers
}

export type postFoodsResponse =
  | postFoodsResponseSuccess
  | postFoodsResponseError

export const getPostFoodsUrl = () => {
  return `https://api.nal.usda.gov/fdc/v1/foods`
}

export const postFoods = async (
  foodsCriteria: FoodsCriteria,
  options?: RequestInit
): Promise<postFoodsResponse> => {
  return customFetch<postFoodsResponse>(getPostFoodsUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(foodsCriteria)
  })
}

/**
 * Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set.
 * @summary Returns a paged list of foods, in the 'abridged' format
 */
export type getFoodsListResponse200 = {
  data: AbridgedFoodItem[]
  status: 200
}

export type getFoodsListResponse400 = {
  data: void
  status: 400
}

export type getFoodsListResponseSuccess = getFoodsListResponse200 & {
  headers: Headers
}
export type getFoodsListResponseError = getFoodsListResponse400 & {
  headers: Headers
}

export type getFoodsListResponse =
  | getFoodsListResponseSuccess
  | getFoodsListResponseError

export const getGetFoodsListUrl = (params?: GetFoodsListParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    const explodeParameters = ['dataType']

    if (Array.isArray(value) && explodeParameters.includes(key)) {
      value.forEach((v) =>
        normalizedParams.append(key, v === null ? 'null' : v.toString())
      )
      return
    }

    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `https://api.nal.usda.gov/fdc/v1/foods/list?${stringifiedParams}`
    : `https://api.nal.usda.gov/fdc/v1/foods/list`
}

export const getFoodsList = async (
  params?: GetFoodsListParams,
  options?: RequestInit
): Promise<getFoodsListResponse> => {
  return customFetch<getFoodsListResponse>(getGetFoodsListUrl(params), {
    ...options,
    method: 'GET'
  })
}

/**
 * Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set.
 * @summary Returns a paged list of foods, in the 'abridged' format
 */
export type postFoodsListResponse200 = {
  data: AbridgedFoodItem[]
  status: 200
}

export type postFoodsListResponse400 = {
  data: void
  status: 400
}

export type postFoodsListResponseSuccess = postFoodsListResponse200 & {
  headers: Headers
}
export type postFoodsListResponseError = postFoodsListResponse400 & {
  headers: Headers
}

export type postFoodsListResponse =
  | postFoodsListResponseSuccess
  | postFoodsListResponseError

export const getPostFoodsListUrl = () => {
  return `https://api.nal.usda.gov/fdc/v1/foods/list`
}

export const postFoodsList = async (
  foodListCriteria: FoodListCriteria,
  options?: RequestInit
): Promise<postFoodsListResponse> => {
  return customFetch<postFoodsListResponse>(getPostFoodsListUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(foodListCriteria)
  })
}

/**
 * Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting.
 * @summary Returns a list of foods that matched search (query) keywords
 */
export type getFoodsSearchResponse200 = {
  data: SearchResult
  status: 200
}

export type getFoodsSearchResponse400 = {
  data: void
  status: 400
}

export type getFoodsSearchResponseSuccess = getFoodsSearchResponse200 & {
  headers: Headers
}
export type getFoodsSearchResponseError = getFoodsSearchResponse400 & {
  headers: Headers
}

export type getFoodsSearchResponse =
  | getFoodsSearchResponseSuccess
  | getFoodsSearchResponseError

export const getGetFoodsSearchUrl = (params: GetFoodsSearchParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    const explodeParameters = ['dataType']

    if (Array.isArray(value) && explodeParameters.includes(key)) {
      value.forEach((v) =>
        normalizedParams.append(key, v === null ? 'null' : v.toString())
      )
      return
    }

    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `https://api.nal.usda.gov/fdc/v1/foods/search?${stringifiedParams}`
    : `https://api.nal.usda.gov/fdc/v1/foods/search`
}

export const getFoodsSearch = async (
  params: GetFoodsSearchParams,
  options?: RequestInit
): Promise<getFoodsSearchResponse> => {
  return customFetch<getFoodsSearchResponse>(getGetFoodsSearchUrl(params), {
    ...options,
    method: 'GET'
  })
}

/**
 * Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting.
 * @summary Returns a list of foods that matched search (query) keywords
 */
export type postFoodsSearchResponse200 = {
  data: SearchResult
  status: 200
}

export type postFoodsSearchResponse400 = {
  data: void
  status: 400
}

export type postFoodsSearchResponseSuccess = postFoodsSearchResponse200 & {
  headers: Headers
}
export type postFoodsSearchResponseError = postFoodsSearchResponse400 & {
  headers: Headers
}

export type postFoodsSearchResponse =
  | postFoodsSearchResponseSuccess
  | postFoodsSearchResponseError

export const getPostFoodsSearchUrl = () => {
  return `https://api.nal.usda.gov/fdc/v1/foods/search`
}

export const postFoodsSearch = async (
  foodSearchCriteria: FoodSearchCriteria,
  options?: RequestInit
): Promise<postFoodsSearchResponse> => {
  return customFetch<postFoodsSearchResponse>(getPostFoodsSearchUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(foodSearchCriteria)
  })
}

/**
 * The OpenAPI 3.0 specification for the FDC API rendered as JSON (JavaScript Object Notation)
 * @summary Returns this documentation in JSON format
 */
export type getJsonSpecResponseDefault = {
  data: void
  status: number
}
export type getJsonSpecResponseError = getJsonSpecResponseDefault & {
  headers: Headers
}

export type getJsonSpecResponse = getJsonSpecResponseError

export const getGetJsonSpecUrl = () => {
  return `https://api.nal.usda.gov/fdc/v1/json-spec`
}

export const getJsonSpec = async (
  options?: RequestInit
): Promise<getJsonSpecResponse> => {
  return customFetch<getJsonSpecResponse>(getGetJsonSpecUrl(), {
    ...options,
    method: 'GET'
  })
}

/**
 * The OpenAPI 3.0 specification for the FDC API rendered as YAML (YAML Ain't Markup Language)
 * @summary Returns this documentation in JSON format
 */
export type getYamlSpecResponseDefault = {
  data: void
  status: number
}
export type getYamlSpecResponseError = getYamlSpecResponseDefault & {
  headers: Headers
}

export type getYamlSpecResponse = getYamlSpecResponseError

export const getGetYamlSpecUrl = () => {
  return `https://api.nal.usda.gov/fdc/v1/yaml-spec`
}

export const getYamlSpec = async (
  options?: RequestInit
): Promise<getYamlSpecResponse> => {
  return customFetch<getYamlSpecResponse>(getGetYamlSpecUrl(), {
    ...options,
    method: 'GET'
  })
}

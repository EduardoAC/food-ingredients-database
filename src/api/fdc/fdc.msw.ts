/**
 * Generated by orval v7.12.2 üç∫
 * Do not edit manually.
 * Food Data Central API
 * The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.
  To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.
  
  Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)
 * OpenAPI spec version: 1.0.1
 */
import { faker } from '@faker-js/faker'

import { HttpResponse, delay, http } from 'msw'
import type { RequestHandlerOptions } from 'msw'

import type {
  AbridgedFoodItem,
  BrandedFoodItem,
  GetFood200,
  GetFoods200Item,
  PostFoods200Item,
  SearchResult
} from '.././model'

export const getGetFoodResponseAbridgedFoodItemMock = (
  overrideResponse: Partial<AbridgedFoodItem> = {}
): AbridgedFoodItem => ({
  ...{
    dataType: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    fdcId: faker.number.int({ min: undefined, max: undefined }),
    foodNutrients: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        number: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined
        ]),
        name: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        amount: faker.helpers.arrayElement([
          faker.number.float({
            min: undefined,
            max: undefined,
            fractionDigits: 2
          }),
          undefined
        ]),
        unitName: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        derivationCode: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        derivationDescription: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ])
      })),
      undefined
    ]),
    publicationDate: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined
    ]),
    brandOwner: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined
    ]),
    gtinUpc: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined
    ]),
    ndbNumber: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined
    ]),
    foodCode: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined
    ])
  },
  ...overrideResponse
})

export const getGetFoodResponseBrandedFoodItemMock = (
  overrideResponse: Partial<BrandedFoodItem> = {}
): BrandedFoodItem => ({
  ...{
    fdcId: faker.number.int({ min: undefined, max: undefined }),
    availableDate: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined
    ]),
    brandOwner: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined
    ]),
    dataSource: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined
    ]),
    dataType: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    foodClass: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined
    ]),
    gtinUpc: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined
    ]),
    householdServingFullText: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined
    ]),
    ingredients: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined
    ]),
    modifiedDate: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined
    ]),
    publicationDate: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined
    ]),
    servingSize: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined
    ]),
    servingSizeUnit: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined
    ]),
    preparationStateCode: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined
    ]),
    brandedFoodCategory: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined
    ]),
    tradeChannel: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
      undefined
    ]),
    gpcClassCode: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined
    ]),
    foodNutrients: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        id: faker.number.int({ min: undefined, max: undefined }),
        amount: faker.helpers.arrayElement([
          faker.number.float({
            min: undefined,
            max: undefined,
            fractionDigits: 2
          }),
          undefined
        ]),
        dataPoints: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined
        ]),
        min: faker.helpers.arrayElement([
          faker.number.float({
            min: undefined,
            max: undefined,
            fractionDigits: 2
          }),
          undefined
        ]),
        max: faker.helpers.arrayElement([
          faker.number.float({
            min: undefined,
            max: undefined,
            fractionDigits: 2
          }),
          undefined
        ]),
        median: faker.helpers.arrayElement([
          faker.number.float({
            min: undefined,
            max: undefined,
            fractionDigits: 2
          }),
          undefined
        ]),
        type: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        nutrient: faker.helpers.arrayElement([
          {
            id: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            number: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            name: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            rank: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            unitName: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ])
          },
          undefined
        ]),
        foodNutrientDerivation: faker.helpers.arrayElement([
          {
            id: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            code: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            description: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            foodNutrientSource: faker.helpers.arrayElement([
              {
                id: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                code: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                description: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ])
              },
              undefined
            ])
          },
          undefined
        ]),
        nutrientAnalysisDetails: faker.helpers.arrayElement([
          {
            subSampleId: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            amount: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            nutrientId: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            labMethodDescription: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            labMethodOriginalDescription: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            labMethodLink: faker.helpers.arrayElement([
              faker.internet.url(),
              undefined
            ]),
            labMethodTechnique: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            nutrientAcquisitionDetails: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
              ).map(() => ({
                sampleUnitId: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                purchaseDate: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                storeCity: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                storeState: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ])
              })),
              undefined
            ])
          },
          undefined
        ])
      })),
      undefined
    ]),
    foodUpdateLog: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        fdcId: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined
        ]),
        availableDate: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        brandOwner: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        dataSource: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        dataType: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        description: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        foodClass: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        gtinUpc: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        householdServingFullText: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        ingredients: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        modifiedDate: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        publicationDate: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        servingSize: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined
        ]),
        servingSizeUnit: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        brandedFoodCategory: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        changes: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        foodAttributes: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            id: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            sequenceNumber: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            value: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            FoodAttributeType: faker.helpers.arrayElement([
              {
                id: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                name: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                description: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ])
              },
              undefined
            ])
          })),
          undefined
        ])
      })),
      undefined
    ]),
    labelNutrients: faker.helpers.arrayElement([
      {
        fat: faker.helpers.arrayElement([
          {
            value: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ])
          },
          undefined
        ]),
        saturatedFat: faker.helpers.arrayElement([
          {
            value: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ])
          },
          undefined
        ]),
        transFat: faker.helpers.arrayElement([
          {
            value: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ])
          },
          undefined
        ]),
        cholesterol: faker.helpers.arrayElement([
          {
            value: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ])
          },
          undefined
        ]),
        sodium: faker.helpers.arrayElement([
          {
            value: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ])
          },
          undefined
        ]),
        carbohydrates: faker.helpers.arrayElement([
          {
            value: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ])
          },
          undefined
        ]),
        fiber: faker.helpers.arrayElement([
          {
            value: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ])
          },
          undefined
        ]),
        sugars: faker.helpers.arrayElement([
          {
            value: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ])
          },
          undefined
        ]),
        protein: faker.helpers.arrayElement([
          {
            value: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ])
          },
          undefined
        ]),
        calcium: faker.helpers.arrayElement([
          {
            value: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ])
          },
          undefined
        ]),
        iron: faker.helpers.arrayElement([
          {
            value: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ])
          },
          undefined
        ]),
        potassium: faker.helpers.arrayElement([
          {
            value: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ])
          },
          undefined
        ]),
        calories: faker.helpers.arrayElement([
          {
            value: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ])
          },
          undefined
        ])
      },
      undefined
    ])
  },
  ...overrideResponse
})

export const getGetFoodResponseMock = (): GetFood200 =>
  faker.helpers.arrayElement([
    { ...getGetFoodResponseAbridgedFoodItemMock() },
    { ...getGetFoodResponseBrandedFoodItemMock() },
    {
      fdcId: faker.number.int({ min: undefined, max: undefined }),
      dataType: faker.string.alpha({ length: { min: 10, max: 20 } }),
      description: faker.string.alpha({ length: { min: 10, max: 20 } }),
      foodClass: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      footNote: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      isHistoricalReference: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined
      ]),
      ndbNumber: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined
      ]),
      publicationDate: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      scientificName: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      foodCategory: faker.helpers.arrayElement([
        {
          id: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined
          ]),
          code: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined
          ]),
          description: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined
          ])
        },
        undefined
      ]),
      foodComponents: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined
          ]),
          name: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined
          ]),
          dataPoints: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined
          ]),
          gramWeight: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2
            }),
            undefined
          ]),
          isRefuse: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined
          ]),
          minYearAcquired: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined
          ]),
          percentWeight: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2
            }),
            undefined
          ])
        })),
        undefined
      ]),
      foodNutrients: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          id: faker.number.int({ min: undefined, max: undefined }),
          amount: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2
            }),
            undefined
          ]),
          dataPoints: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined
          ]),
          min: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2
            }),
            undefined
          ]),
          max: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2
            }),
            undefined
          ]),
          median: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2
            }),
            undefined
          ]),
          type: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined
          ]),
          nutrient: faker.helpers.arrayElement([
            {
              id: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined
              ]),
              number: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined
              ]),
              name: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined
              ]),
              rank: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined
              ]),
              unitName: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined
              ])
            },
            undefined
          ]),
          foodNutrientDerivation: faker.helpers.arrayElement([
            {
              id: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined
              ]),
              code: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined
              ]),
              description: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined
              ]),
              foodNutrientSource: faker.helpers.arrayElement([
                {
                  id: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined
                  ]),
                  code: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined
                  ]),
                  description: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined
                  ])
                },
                undefined
              ])
            },
            undefined
          ]),
          nutrientAnalysisDetails: faker.helpers.arrayElement([
            {
              subSampleId: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined
              ]),
              amount: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2
                }),
                undefined
              ]),
              nutrientId: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined
              ]),
              labMethodDescription: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined
              ]),
              labMethodOriginalDescription: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined
              ]),
              labMethodLink: faker.helpers.arrayElement([
                faker.internet.url(),
                undefined
              ]),
              labMethodTechnique: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined
              ]),
              nutrientAcquisitionDetails: faker.helpers.arrayElement([
                Array.from(
                  { length: faker.number.int({ min: 1, max: 10 }) },
                  (_, i) => i + 1
                ).map(() => ({
                  sampleUnitId: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined
                  ]),
                  purchaseDate: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined
                  ]),
                  storeCity: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined
                  ]),
                  storeState: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined
                  ])
                })),
                undefined
              ])
            },
            undefined
          ])
        })),
        undefined
      ]),
      foodPortions: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined
          ]),
          amount: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2
            }),
            undefined
          ]),
          dataPoints: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined
          ]),
          gramWeight: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2
            }),
            undefined
          ]),
          minYearAcquired: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined
          ]),
          modifier: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined
          ]),
          portionDescription: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined
          ]),
          sequenceNumber: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined
          ]),
          measureUnit: faker.helpers.arrayElement([
            {
              id: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined
              ]),
              abbreviation: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined
              ]),
              name: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined
              ])
            },
            undefined
          ])
        })),
        undefined
      ]),
      inputFoods: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined
          ]),
          foodDescription: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined
          ]),
          inputFood: faker.helpers.arrayElement([
            {
              fdcId: faker.number.int({ min: undefined, max: undefined }),
              datatype: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined
              ]),
              description: faker.string.alpha({ length: { min: 10, max: 20 } }),
              foodClass: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined
              ]),
              publicationDate: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined
              ]),
              foodAttributes: faker.helpers.arrayElement([
                Array.from(
                  { length: faker.number.int({ min: 1, max: 10 }) },
                  (_, i) => i + 1
                ).map(() => ({
                  id: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined
                  ]),
                  code: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined
                  ]),
                  description: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined
                  ])
                })),
                undefined
              ])
            },
            undefined
          ])
        })),
        undefined
      ]),
      nutrientConversionFactors: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          type: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined
          ]),
          value: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2
            }),
            undefined
          ])
        })),
        undefined
      ])
    },
    {
      fdcId: faker.number.int({ min: undefined, max: undefined }),
      dataType: faker.string.alpha({ length: { min: 10, max: 20 } }),
      description: faker.string.alpha({ length: { min: 10, max: 20 } }),
      foodClass: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      isHistoricalReference: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined
      ]),
      ndbNumber: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined
      ]),
      publicationDate: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      scientificName: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      foodCategory: faker.helpers.arrayElement([
        {
          id: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined
          ]),
          code: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined
          ]),
          description: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined
          ])
        },
        undefined
      ]),
      foodNutrients: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          id: faker.number.int({ min: undefined, max: undefined }),
          amount: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2
            }),
            undefined
          ]),
          dataPoints: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined
          ]),
          min: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2
            }),
            undefined
          ]),
          max: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2
            }),
            undefined
          ]),
          median: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2
            }),
            undefined
          ]),
          type: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined
          ]),
          nutrient: faker.helpers.arrayElement([
            {
              id: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined
              ]),
              number: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined
              ]),
              name: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined
              ]),
              rank: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined
              ]),
              unitName: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined
              ])
            },
            undefined
          ]),
          foodNutrientDerivation: faker.helpers.arrayElement([
            {
              id: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined
              ]),
              code: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined
              ]),
              description: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined
              ]),
              foodNutrientSource: faker.helpers.arrayElement([
                {
                  id: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined
                  ]),
                  code: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined
                  ]),
                  description: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined
                  ])
                },
                undefined
              ])
            },
            undefined
          ]),
          nutrientAnalysisDetails: faker.helpers.arrayElement([
            {
              subSampleId: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined
              ]),
              amount: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2
                }),
                undefined
              ]),
              nutrientId: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined
              ]),
              labMethodDescription: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined
              ]),
              labMethodOriginalDescription: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined
              ]),
              labMethodLink: faker.helpers.arrayElement([
                faker.internet.url(),
                undefined
              ]),
              labMethodTechnique: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined
              ]),
              nutrientAcquisitionDetails: faker.helpers.arrayElement([
                Array.from(
                  { length: faker.number.int({ min: 1, max: 10 }) },
                  (_, i) => i + 1
                ).map(() => ({
                  sampleUnitId: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined
                  ]),
                  purchaseDate: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined
                  ]),
                  storeCity: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined
                  ]),
                  storeState: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined
                  ])
                })),
                undefined
              ])
            },
            undefined
          ])
        })),
        undefined
      ]),
      nutrientConversionFactors: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          type: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined
          ]),
          value: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2
            }),
            undefined
          ])
        })),
        undefined
      ])
    },
    {
      fdcId: faker.number.int({ min: undefined, max: undefined }),
      datatype: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      description: faker.string.alpha({ length: { min: 10, max: 20 } }),
      endDate: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      foodClass: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      foodCode: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      publicationDate: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      startDate: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      foodAttributes: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined
          ]),
          sequenceNumber: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined
          ]),
          value: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined
          ]),
          FoodAttributeType: faker.helpers.arrayElement([
            {
              id: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined
              ]),
              name: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined
              ]),
              description: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined
              ])
            },
            undefined
          ])
        })),
        undefined
      ]),
      foodPortions: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined
          ]),
          amount: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2
            }),
            undefined
          ]),
          dataPoints: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined
          ]),
          gramWeight: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2
            }),
            undefined
          ]),
          minYearAcquired: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined
          ]),
          modifier: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined
          ]),
          portionDescription: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined
          ]),
          sequenceNumber: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined
          ]),
          measureUnit: faker.helpers.arrayElement([
            {
              id: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined
              ]),
              abbreviation: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined
              ]),
              name: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined
              ])
            },
            undefined
          ])
        })),
        undefined
      ]),
      inputFoods: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined
          ]),
          amount: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2
            }),
            undefined
          ]),
          foodDescription: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined
          ]),
          ingredientCode: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined
          ]),
          ingredientDescription: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined
          ]),
          ingredientWeight: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2
            }),
            undefined
          ]),
          portionCode: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined
          ]),
          portionDescription: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined
          ]),
          sequenceNumber: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined
          ]),
          surveyFlag: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined
          ]),
          unit: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined
          ]),
          retentionFactor: faker.helpers.arrayElement([
            {
              id: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined
              ]),
              code: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined
              ]),
              description: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined
              ])
            },
            undefined
          ])
        })),
        undefined
      ]),
      wweiaFoodCategory: faker.helpers.arrayElement([
        {
          wweiaFoodCategoryCode: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined
          ]),
          wweiaFoodCategoryDescription: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined
          ])
        },
        undefined
      ])
    }
  ])

export const getGetFoodsResponseMock = (): GetFoods200Item[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() =>
    faker.helpers.arrayElement([
      {
        dataType: faker.string.alpha({ length: { min: 10, max: 20 } }),
        description: faker.string.alpha({ length: { min: 10, max: 20 } }),
        fdcId: faker.number.int({ min: undefined, max: undefined }),
        foodNutrients: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            number: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            name: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            amount: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            unitName: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            derivationCode: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            derivationDescription: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ])
          })),
          undefined
        ]),
        publicationDate: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        brandOwner: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        gtinUpc: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        ndbNumber: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined
        ]),
        foodCode: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ])
      },
      {
        fdcId: faker.number.int({ min: undefined, max: undefined }),
        availableDate: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        brandOwner: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        dataSource: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        dataType: faker.string.alpha({ length: { min: 10, max: 20 } }),
        description: faker.string.alpha({ length: { min: 10, max: 20 } }),
        foodClass: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        gtinUpc: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        householdServingFullText: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        ingredients: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        modifiedDate: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        publicationDate: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        servingSize: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined
        ]),
        servingSizeUnit: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        preparationStateCode: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        brandedFoodCategory: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        tradeChannel: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
          undefined
        ]),
        gpcClassCode: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined
        ]),
        foodNutrients: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            id: faker.number.int({ min: undefined, max: undefined }),
            amount: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            dataPoints: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            min: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            max: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            median: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            type: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            nutrient: faker.helpers.arrayElement([
              {
                id: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                number: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                name: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                rank: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                unitName: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ])
              },
              undefined
            ]),
            foodNutrientDerivation: faker.helpers.arrayElement([
              {
                id: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                code: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                description: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                foodNutrientSource: faker.helpers.arrayElement([
                  {
                    id: faker.helpers.arrayElement([
                      faker.number.int({ min: undefined, max: undefined }),
                      undefined
                    ]),
                    code: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ]),
                    description: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ])
                  },
                  undefined
                ])
              },
              undefined
            ]),
            nutrientAnalysisDetails: faker.helpers.arrayElement([
              {
                subSampleId: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                amount: faker.helpers.arrayElement([
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2
                  }),
                  undefined
                ]),
                nutrientId: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                labMethodDescription: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                labMethodOriginalDescription: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                labMethodLink: faker.helpers.arrayElement([
                  faker.internet.url(),
                  undefined
                ]),
                labMethodTechnique: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                nutrientAcquisitionDetails: faker.helpers.arrayElement([
                  Array.from(
                    { length: faker.number.int({ min: 1, max: 10 }) },
                    (_, i) => i + 1
                  ).map(() => ({
                    sampleUnitId: faker.helpers.arrayElement([
                      faker.number.int({ min: undefined, max: undefined }),
                      undefined
                    ]),
                    purchaseDate: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ]),
                    storeCity: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ]),
                    storeState: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ])
                  })),
                  undefined
                ])
              },
              undefined
            ])
          })),
          undefined
        ]),
        foodUpdateLog: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            fdcId: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            availableDate: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            brandOwner: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            dataSource: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            dataType: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            description: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            foodClass: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            gtinUpc: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            householdServingFullText: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            ingredients: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            modifiedDate: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            publicationDate: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            servingSize: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            servingSizeUnit: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            brandedFoodCategory: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            changes: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            foodAttributes: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
              ).map(() => ({
                id: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                sequenceNumber: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                value: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                FoodAttributeType: faker.helpers.arrayElement([
                  {
                    id: faker.helpers.arrayElement([
                      faker.number.int({ min: undefined, max: undefined }),
                      undefined
                    ]),
                    name: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ]),
                    description: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ])
                  },
                  undefined
                ])
              })),
              undefined
            ])
          })),
          undefined
        ]),
        labelNutrients: faker.helpers.arrayElement([
          {
            fat: faker.helpers.arrayElement([
              {
                value: faker.helpers.arrayElement([
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2
                  }),
                  undefined
                ])
              },
              undefined
            ]),
            saturatedFat: faker.helpers.arrayElement([
              {
                value: faker.helpers.arrayElement([
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2
                  }),
                  undefined
                ])
              },
              undefined
            ]),
            transFat: faker.helpers.arrayElement([
              {
                value: faker.helpers.arrayElement([
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2
                  }),
                  undefined
                ])
              },
              undefined
            ]),
            cholesterol: faker.helpers.arrayElement([
              {
                value: faker.helpers.arrayElement([
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2
                  }),
                  undefined
                ])
              },
              undefined
            ]),
            sodium: faker.helpers.arrayElement([
              {
                value: faker.helpers.arrayElement([
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2
                  }),
                  undefined
                ])
              },
              undefined
            ]),
            carbohydrates: faker.helpers.arrayElement([
              {
                value: faker.helpers.arrayElement([
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2
                  }),
                  undefined
                ])
              },
              undefined
            ]),
            fiber: faker.helpers.arrayElement([
              {
                value: faker.helpers.arrayElement([
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2
                  }),
                  undefined
                ])
              },
              undefined
            ]),
            sugars: faker.helpers.arrayElement([
              {
                value: faker.helpers.arrayElement([
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2
                  }),
                  undefined
                ])
              },
              undefined
            ]),
            protein: faker.helpers.arrayElement([
              {
                value: faker.helpers.arrayElement([
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2
                  }),
                  undefined
                ])
              },
              undefined
            ]),
            calcium: faker.helpers.arrayElement([
              {
                value: faker.helpers.arrayElement([
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2
                  }),
                  undefined
                ])
              },
              undefined
            ]),
            iron: faker.helpers.arrayElement([
              {
                value: faker.helpers.arrayElement([
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2
                  }),
                  undefined
                ])
              },
              undefined
            ]),
            potassium: faker.helpers.arrayElement([
              {
                value: faker.helpers.arrayElement([
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2
                  }),
                  undefined
                ])
              },
              undefined
            ]),
            calories: faker.helpers.arrayElement([
              {
                value: faker.helpers.arrayElement([
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2
                  }),
                  undefined
                ])
              },
              undefined
            ])
          },
          undefined
        ])
      },
      {
        fdcId: faker.number.int({ min: undefined, max: undefined }),
        dataType: faker.string.alpha({ length: { min: 10, max: 20 } }),
        description: faker.string.alpha({ length: { min: 10, max: 20 } }),
        foodClass: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        footNote: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        isHistoricalReference: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined
        ]),
        ndbNumber: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined
        ]),
        publicationDate: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        scientificName: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        foodCategory: faker.helpers.arrayElement([
          {
            id: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            code: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            description: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ])
          },
          undefined
        ]),
        foodComponents: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            id: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            name: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            dataPoints: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            gramWeight: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            isRefuse: faker.helpers.arrayElement([
              faker.datatype.boolean(),
              undefined
            ]),
            minYearAcquired: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            percentWeight: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ])
          })),
          undefined
        ]),
        foodNutrients: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            id: faker.number.int({ min: undefined, max: undefined }),
            amount: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            dataPoints: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            min: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            max: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            median: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            type: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            nutrient: faker.helpers.arrayElement([
              {
                id: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                number: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                name: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                rank: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                unitName: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ])
              },
              undefined
            ]),
            foodNutrientDerivation: faker.helpers.arrayElement([
              {
                id: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                code: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                description: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                foodNutrientSource: faker.helpers.arrayElement([
                  {
                    id: faker.helpers.arrayElement([
                      faker.number.int({ min: undefined, max: undefined }),
                      undefined
                    ]),
                    code: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ]),
                    description: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ])
                  },
                  undefined
                ])
              },
              undefined
            ]),
            nutrientAnalysisDetails: faker.helpers.arrayElement([
              {
                subSampleId: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                amount: faker.helpers.arrayElement([
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2
                  }),
                  undefined
                ]),
                nutrientId: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                labMethodDescription: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                labMethodOriginalDescription: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                labMethodLink: faker.helpers.arrayElement([
                  faker.internet.url(),
                  undefined
                ]),
                labMethodTechnique: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                nutrientAcquisitionDetails: faker.helpers.arrayElement([
                  Array.from(
                    { length: faker.number.int({ min: 1, max: 10 }) },
                    (_, i) => i + 1
                  ).map(() => ({
                    sampleUnitId: faker.helpers.arrayElement([
                      faker.number.int({ min: undefined, max: undefined }),
                      undefined
                    ]),
                    purchaseDate: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ]),
                    storeCity: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ]),
                    storeState: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ])
                  })),
                  undefined
                ])
              },
              undefined
            ])
          })),
          undefined
        ]),
        foodPortions: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            id: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            amount: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            dataPoints: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            gramWeight: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            minYearAcquired: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            modifier: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            portionDescription: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            sequenceNumber: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            measureUnit: faker.helpers.arrayElement([
              {
                id: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                abbreviation: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                name: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ])
              },
              undefined
            ])
          })),
          undefined
        ]),
        inputFoods: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            id: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            foodDescription: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            inputFood: faker.helpers.arrayElement([
              {
                fdcId: faker.number.int({ min: undefined, max: undefined }),
                datatype: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                description: faker.string.alpha({
                  length: { min: 10, max: 20 }
                }),
                foodClass: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                publicationDate: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                foodAttributes: faker.helpers.arrayElement([
                  Array.from(
                    { length: faker.number.int({ min: 1, max: 10 }) },
                    (_, i) => i + 1
                  ).map(() => ({
                    id: faker.helpers.arrayElement([
                      faker.number.int({ min: undefined, max: undefined }),
                      undefined
                    ]),
                    code: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ]),
                    description: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ])
                  })),
                  undefined
                ])
              },
              undefined
            ])
          })),
          undefined
        ]),
        nutrientConversionFactors: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            type: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            value: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ])
          })),
          undefined
        ])
      },
      {
        fdcId: faker.number.int({ min: undefined, max: undefined }),
        dataType: faker.string.alpha({ length: { min: 10, max: 20 } }),
        description: faker.string.alpha({ length: { min: 10, max: 20 } }),
        foodClass: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        isHistoricalReference: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined
        ]),
        ndbNumber: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined
        ]),
        publicationDate: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        scientificName: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        foodCategory: faker.helpers.arrayElement([
          {
            id: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            code: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            description: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ])
          },
          undefined
        ]),
        foodNutrients: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            id: faker.number.int({ min: undefined, max: undefined }),
            amount: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            dataPoints: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            min: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            max: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            median: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            type: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            nutrient: faker.helpers.arrayElement([
              {
                id: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                number: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                name: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                rank: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                unitName: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ])
              },
              undefined
            ]),
            foodNutrientDerivation: faker.helpers.arrayElement([
              {
                id: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                code: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                description: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                foodNutrientSource: faker.helpers.arrayElement([
                  {
                    id: faker.helpers.arrayElement([
                      faker.number.int({ min: undefined, max: undefined }),
                      undefined
                    ]),
                    code: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ]),
                    description: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ])
                  },
                  undefined
                ])
              },
              undefined
            ]),
            nutrientAnalysisDetails: faker.helpers.arrayElement([
              {
                subSampleId: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                amount: faker.helpers.arrayElement([
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2
                  }),
                  undefined
                ]),
                nutrientId: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                labMethodDescription: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                labMethodOriginalDescription: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                labMethodLink: faker.helpers.arrayElement([
                  faker.internet.url(),
                  undefined
                ]),
                labMethodTechnique: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                nutrientAcquisitionDetails: faker.helpers.arrayElement([
                  Array.from(
                    { length: faker.number.int({ min: 1, max: 10 }) },
                    (_, i) => i + 1
                  ).map(() => ({
                    sampleUnitId: faker.helpers.arrayElement([
                      faker.number.int({ min: undefined, max: undefined }),
                      undefined
                    ]),
                    purchaseDate: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ]),
                    storeCity: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ]),
                    storeState: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ])
                  })),
                  undefined
                ])
              },
              undefined
            ])
          })),
          undefined
        ]),
        nutrientConversionFactors: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            type: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            value: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ])
          })),
          undefined
        ])
      },
      {
        fdcId: faker.number.int({ min: undefined, max: undefined }),
        datatype: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        description: faker.string.alpha({ length: { min: 10, max: 20 } }),
        endDate: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        foodClass: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        foodCode: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        publicationDate: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        startDate: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        foodAttributes: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            id: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            sequenceNumber: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            value: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            FoodAttributeType: faker.helpers.arrayElement([
              {
                id: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                name: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                description: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ])
              },
              undefined
            ])
          })),
          undefined
        ]),
        foodPortions: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            id: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            amount: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            dataPoints: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            gramWeight: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            minYearAcquired: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            modifier: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            portionDescription: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            sequenceNumber: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            measureUnit: faker.helpers.arrayElement([
              {
                id: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                abbreviation: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                name: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ])
              },
              undefined
            ])
          })),
          undefined
        ]),
        inputFoods: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            id: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            amount: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            foodDescription: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            ingredientCode: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            ingredientDescription: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            ingredientWeight: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            portionCode: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            portionDescription: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            sequenceNumber: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            surveyFlag: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            unit: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            retentionFactor: faker.helpers.arrayElement([
              {
                id: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                code: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                description: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ])
              },
              undefined
            ])
          })),
          undefined
        ]),
        wweiaFoodCategory: faker.helpers.arrayElement([
          {
            wweiaFoodCategoryCode: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            wweiaFoodCategoryDescription: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ])
          },
          undefined
        ])
      }
    ])
  )

export const getPostFoodsResponseMock = (): PostFoods200Item[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() =>
    faker.helpers.arrayElement([
      {
        dataType: faker.string.alpha({ length: { min: 10, max: 20 } }),
        description: faker.string.alpha({ length: { min: 10, max: 20 } }),
        fdcId: faker.number.int({ min: undefined, max: undefined }),
        foodNutrients: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            number: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            name: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            amount: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            unitName: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            derivationCode: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            derivationDescription: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ])
          })),
          undefined
        ]),
        publicationDate: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        brandOwner: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        gtinUpc: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        ndbNumber: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined
        ]),
        foodCode: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ])
      },
      {
        fdcId: faker.number.int({ min: undefined, max: undefined }),
        availableDate: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        brandOwner: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        dataSource: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        dataType: faker.string.alpha({ length: { min: 10, max: 20 } }),
        description: faker.string.alpha({ length: { min: 10, max: 20 } }),
        foodClass: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        gtinUpc: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        householdServingFullText: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        ingredients: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        modifiedDate: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        publicationDate: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        servingSize: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined
        ]),
        servingSizeUnit: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        preparationStateCode: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        brandedFoodCategory: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        tradeChannel: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
          undefined
        ]),
        gpcClassCode: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined
        ]),
        foodNutrients: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            id: faker.number.int({ min: undefined, max: undefined }),
            amount: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            dataPoints: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            min: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            max: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            median: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            type: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            nutrient: faker.helpers.arrayElement([
              {
                id: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                number: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                name: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                rank: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                unitName: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ])
              },
              undefined
            ]),
            foodNutrientDerivation: faker.helpers.arrayElement([
              {
                id: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                code: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                description: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                foodNutrientSource: faker.helpers.arrayElement([
                  {
                    id: faker.helpers.arrayElement([
                      faker.number.int({ min: undefined, max: undefined }),
                      undefined
                    ]),
                    code: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ]),
                    description: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ])
                  },
                  undefined
                ])
              },
              undefined
            ]),
            nutrientAnalysisDetails: faker.helpers.arrayElement([
              {
                subSampleId: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                amount: faker.helpers.arrayElement([
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2
                  }),
                  undefined
                ]),
                nutrientId: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                labMethodDescription: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                labMethodOriginalDescription: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                labMethodLink: faker.helpers.arrayElement([
                  faker.internet.url(),
                  undefined
                ]),
                labMethodTechnique: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                nutrientAcquisitionDetails: faker.helpers.arrayElement([
                  Array.from(
                    { length: faker.number.int({ min: 1, max: 10 }) },
                    (_, i) => i + 1
                  ).map(() => ({
                    sampleUnitId: faker.helpers.arrayElement([
                      faker.number.int({ min: undefined, max: undefined }),
                      undefined
                    ]),
                    purchaseDate: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ]),
                    storeCity: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ]),
                    storeState: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ])
                  })),
                  undefined
                ])
              },
              undefined
            ])
          })),
          undefined
        ]),
        foodUpdateLog: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            fdcId: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            availableDate: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            brandOwner: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            dataSource: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            dataType: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            description: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            foodClass: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            gtinUpc: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            householdServingFullText: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            ingredients: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            modifiedDate: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            publicationDate: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            servingSize: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            servingSizeUnit: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            brandedFoodCategory: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            changes: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            foodAttributes: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
              ).map(() => ({
                id: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                sequenceNumber: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                value: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                FoodAttributeType: faker.helpers.arrayElement([
                  {
                    id: faker.helpers.arrayElement([
                      faker.number.int({ min: undefined, max: undefined }),
                      undefined
                    ]),
                    name: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ]),
                    description: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ])
                  },
                  undefined
                ])
              })),
              undefined
            ])
          })),
          undefined
        ]),
        labelNutrients: faker.helpers.arrayElement([
          {
            fat: faker.helpers.arrayElement([
              {
                value: faker.helpers.arrayElement([
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2
                  }),
                  undefined
                ])
              },
              undefined
            ]),
            saturatedFat: faker.helpers.arrayElement([
              {
                value: faker.helpers.arrayElement([
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2
                  }),
                  undefined
                ])
              },
              undefined
            ]),
            transFat: faker.helpers.arrayElement([
              {
                value: faker.helpers.arrayElement([
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2
                  }),
                  undefined
                ])
              },
              undefined
            ]),
            cholesterol: faker.helpers.arrayElement([
              {
                value: faker.helpers.arrayElement([
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2
                  }),
                  undefined
                ])
              },
              undefined
            ]),
            sodium: faker.helpers.arrayElement([
              {
                value: faker.helpers.arrayElement([
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2
                  }),
                  undefined
                ])
              },
              undefined
            ]),
            carbohydrates: faker.helpers.arrayElement([
              {
                value: faker.helpers.arrayElement([
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2
                  }),
                  undefined
                ])
              },
              undefined
            ]),
            fiber: faker.helpers.arrayElement([
              {
                value: faker.helpers.arrayElement([
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2
                  }),
                  undefined
                ])
              },
              undefined
            ]),
            sugars: faker.helpers.arrayElement([
              {
                value: faker.helpers.arrayElement([
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2
                  }),
                  undefined
                ])
              },
              undefined
            ]),
            protein: faker.helpers.arrayElement([
              {
                value: faker.helpers.arrayElement([
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2
                  }),
                  undefined
                ])
              },
              undefined
            ]),
            calcium: faker.helpers.arrayElement([
              {
                value: faker.helpers.arrayElement([
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2
                  }),
                  undefined
                ])
              },
              undefined
            ]),
            iron: faker.helpers.arrayElement([
              {
                value: faker.helpers.arrayElement([
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2
                  }),
                  undefined
                ])
              },
              undefined
            ]),
            potassium: faker.helpers.arrayElement([
              {
                value: faker.helpers.arrayElement([
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2
                  }),
                  undefined
                ])
              },
              undefined
            ]),
            calories: faker.helpers.arrayElement([
              {
                value: faker.helpers.arrayElement([
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2
                  }),
                  undefined
                ])
              },
              undefined
            ])
          },
          undefined
        ])
      },
      {
        fdcId: faker.number.int({ min: undefined, max: undefined }),
        dataType: faker.string.alpha({ length: { min: 10, max: 20 } }),
        description: faker.string.alpha({ length: { min: 10, max: 20 } }),
        foodClass: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        footNote: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        isHistoricalReference: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined
        ]),
        ndbNumber: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined
        ]),
        publicationDate: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        scientificName: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        foodCategory: faker.helpers.arrayElement([
          {
            id: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            code: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            description: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ])
          },
          undefined
        ]),
        foodComponents: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            id: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            name: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            dataPoints: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            gramWeight: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            isRefuse: faker.helpers.arrayElement([
              faker.datatype.boolean(),
              undefined
            ]),
            minYearAcquired: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            percentWeight: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ])
          })),
          undefined
        ]),
        foodNutrients: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            id: faker.number.int({ min: undefined, max: undefined }),
            amount: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            dataPoints: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            min: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            max: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            median: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            type: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            nutrient: faker.helpers.arrayElement([
              {
                id: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                number: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                name: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                rank: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                unitName: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ])
              },
              undefined
            ]),
            foodNutrientDerivation: faker.helpers.arrayElement([
              {
                id: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                code: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                description: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                foodNutrientSource: faker.helpers.arrayElement([
                  {
                    id: faker.helpers.arrayElement([
                      faker.number.int({ min: undefined, max: undefined }),
                      undefined
                    ]),
                    code: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ]),
                    description: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ])
                  },
                  undefined
                ])
              },
              undefined
            ]),
            nutrientAnalysisDetails: faker.helpers.arrayElement([
              {
                subSampleId: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                amount: faker.helpers.arrayElement([
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2
                  }),
                  undefined
                ]),
                nutrientId: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                labMethodDescription: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                labMethodOriginalDescription: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                labMethodLink: faker.helpers.arrayElement([
                  faker.internet.url(),
                  undefined
                ]),
                labMethodTechnique: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                nutrientAcquisitionDetails: faker.helpers.arrayElement([
                  Array.from(
                    { length: faker.number.int({ min: 1, max: 10 }) },
                    (_, i) => i + 1
                  ).map(() => ({
                    sampleUnitId: faker.helpers.arrayElement([
                      faker.number.int({ min: undefined, max: undefined }),
                      undefined
                    ]),
                    purchaseDate: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ]),
                    storeCity: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ]),
                    storeState: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ])
                  })),
                  undefined
                ])
              },
              undefined
            ])
          })),
          undefined
        ]),
        foodPortions: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            id: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            amount: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            dataPoints: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            gramWeight: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            minYearAcquired: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            modifier: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            portionDescription: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            sequenceNumber: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            measureUnit: faker.helpers.arrayElement([
              {
                id: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                abbreviation: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                name: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ])
              },
              undefined
            ])
          })),
          undefined
        ]),
        inputFoods: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            id: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            foodDescription: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            inputFood: faker.helpers.arrayElement([
              {
                fdcId: faker.number.int({ min: undefined, max: undefined }),
                datatype: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                description: faker.string.alpha({
                  length: { min: 10, max: 20 }
                }),
                foodClass: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                publicationDate: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                foodAttributes: faker.helpers.arrayElement([
                  Array.from(
                    { length: faker.number.int({ min: 1, max: 10 }) },
                    (_, i) => i + 1
                  ).map(() => ({
                    id: faker.helpers.arrayElement([
                      faker.number.int({ min: undefined, max: undefined }),
                      undefined
                    ]),
                    code: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ]),
                    description: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ])
                  })),
                  undefined
                ])
              },
              undefined
            ])
          })),
          undefined
        ]),
        nutrientConversionFactors: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            type: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            value: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ])
          })),
          undefined
        ])
      },
      {
        fdcId: faker.number.int({ min: undefined, max: undefined }),
        dataType: faker.string.alpha({ length: { min: 10, max: 20 } }),
        description: faker.string.alpha({ length: { min: 10, max: 20 } }),
        foodClass: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        isHistoricalReference: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined
        ]),
        ndbNumber: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined
        ]),
        publicationDate: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        scientificName: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        foodCategory: faker.helpers.arrayElement([
          {
            id: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            code: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            description: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ])
          },
          undefined
        ]),
        foodNutrients: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            id: faker.number.int({ min: undefined, max: undefined }),
            amount: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            dataPoints: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            min: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            max: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            median: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            type: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            nutrient: faker.helpers.arrayElement([
              {
                id: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                number: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                name: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                rank: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                unitName: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ])
              },
              undefined
            ]),
            foodNutrientDerivation: faker.helpers.arrayElement([
              {
                id: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                code: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                description: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                foodNutrientSource: faker.helpers.arrayElement([
                  {
                    id: faker.helpers.arrayElement([
                      faker.number.int({ min: undefined, max: undefined }),
                      undefined
                    ]),
                    code: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ]),
                    description: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ])
                  },
                  undefined
                ])
              },
              undefined
            ]),
            nutrientAnalysisDetails: faker.helpers.arrayElement([
              {
                subSampleId: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                amount: faker.helpers.arrayElement([
                  faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2
                  }),
                  undefined
                ]),
                nutrientId: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                labMethodDescription: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                labMethodOriginalDescription: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                labMethodLink: faker.helpers.arrayElement([
                  faker.internet.url(),
                  undefined
                ]),
                labMethodTechnique: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                nutrientAcquisitionDetails: faker.helpers.arrayElement([
                  Array.from(
                    { length: faker.number.int({ min: 1, max: 10 }) },
                    (_, i) => i + 1
                  ).map(() => ({
                    sampleUnitId: faker.helpers.arrayElement([
                      faker.number.int({ min: undefined, max: undefined }),
                      undefined
                    ]),
                    purchaseDate: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ]),
                    storeCity: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ]),
                    storeState: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined
                    ])
                  })),
                  undefined
                ])
              },
              undefined
            ])
          })),
          undefined
        ]),
        nutrientConversionFactors: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            type: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            value: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ])
          })),
          undefined
        ])
      },
      {
        fdcId: faker.number.int({ min: undefined, max: undefined }),
        datatype: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        description: faker.string.alpha({ length: { min: 10, max: 20 } }),
        endDate: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        foodClass: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        foodCode: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        publicationDate: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        startDate: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        foodAttributes: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            id: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            sequenceNumber: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            value: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            FoodAttributeType: faker.helpers.arrayElement([
              {
                id: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                name: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                description: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ])
              },
              undefined
            ])
          })),
          undefined
        ]),
        foodPortions: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            id: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            amount: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            dataPoints: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            gramWeight: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            minYearAcquired: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            modifier: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            portionDescription: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            sequenceNumber: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            measureUnit: faker.helpers.arrayElement([
              {
                id: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                abbreviation: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ]),
                name: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ])
              },
              undefined
            ])
          })),
          undefined
        ]),
        inputFoods: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            id: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            amount: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            foodDescription: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            ingredientCode: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            ingredientDescription: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            ingredientWeight: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2
              }),
              undefined
            ]),
            portionCode: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            portionDescription: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            sequenceNumber: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            surveyFlag: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            unit: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ]),
            retentionFactor: faker.helpers.arrayElement([
              {
                id: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                code: faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  undefined
                ]),
                description: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined
                ])
              },
              undefined
            ])
          })),
          undefined
        ]),
        wweiaFoodCategory: faker.helpers.arrayElement([
          {
            wweiaFoodCategoryCode: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined
            ]),
            wweiaFoodCategoryDescription: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined
            ])
          },
          undefined
        ])
      }
    ])
  )

export const getGetFoodsListResponseMock = (): AbridgedFoodItem[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    dataType: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    fdcId: faker.number.int({ min: undefined, max: undefined }),
    foodNutrients: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        number: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined
        ]),
        name: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        amount: faker.helpers.arrayElement([
          faker.number.float({
            min: undefined,
            max: undefined,
            fractionDigits: 2
          }),
          undefined
        ]),
        unitName: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        derivationCode: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        derivationDescription: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ])
      })),
      undefined
    ]),
    publicationDate: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined
    ]),
    brandOwner: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined
    ]),
    gtinUpc: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined
    ]),
    ndbNumber: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined
    ]),
    foodCode: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined
    ])
  }))

export const getPostFoodsListResponseMock = (): AbridgedFoodItem[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    dataType: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    fdcId: faker.number.int({ min: undefined, max: undefined }),
    foodNutrients: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        number: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined
        ]),
        name: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        amount: faker.helpers.arrayElement([
          faker.number.float({
            min: undefined,
            max: undefined,
            fractionDigits: 2
          }),
          undefined
        ]),
        unitName: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        derivationCode: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ]),
        derivationDescription: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined
        ])
      })),
      undefined
    ]),
    publicationDate: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined
    ]),
    brandOwner: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined
    ]),
    gtinUpc: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined
    ]),
    ndbNumber: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined
    ]),
    foodCode: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined
    ])
  }))

export const getGetFoodsSearchResponseMock = (
  overrideResponse: Partial<SearchResult> = {}
): SearchResult => ({
  foodSearchCriteria: faker.helpers.arrayElement([
    {
      query: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      dataType: faker.helpers.arrayElement([
        faker.helpers.arrayElements([
          'Branded',
          'Foundation',
          'Survey (FNDDS)',
          'SR Legacy'
        ] as const),
        undefined
      ]),
      pageSize: faker.helpers.arrayElement([
        faker.number.int({ min: 1, max: 200 }),
        undefined
      ]),
      pageNumber: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined
      ]),
      sortBy: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          'dataType.keyword',
          'lowercaseDescription.keyword',
          'fdcId',
          'publishedDate'
        ] as const),
        undefined
      ]),
      sortOrder: faker.helpers.arrayElement([
        faker.helpers.arrayElement(['asc', 'desc'] as const),
        undefined
      ]),
      brandOwner: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      tradeChannel: faker.helpers.arrayElement([
        faker.helpers.arrayElements([
          'CHILD_NUTRITION_FOOD_PROGRAMS',
          'DRUG',
          'FOOD_SERVICE',
          'GROCERY',
          'MASS_MERCHANDISING',
          'MILITARY',
          'ONLINE',
          'VENDING'
        ] as const),
        undefined
      ]),
      startDate: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      endDate: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ])
    },
    undefined
  ]),
  totalHits: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined
  ]),
  currentPage: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined
  ]),
  totalPages: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined
  ]),
  foods: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      fdcId: faker.number.int({ min: undefined, max: undefined }),
      dataType: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      description: faker.string.alpha({ length: { min: 10, max: 20 } }),
      foodCode: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      foodNutrients: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          number: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined
          ]),
          name: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined
          ]),
          amount: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2
            }),
            undefined
          ]),
          unitName: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined
          ]),
          derivationCode: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined
          ]),
          derivationDescription: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined
          ])
        })),
        undefined
      ]),
      publicationDate: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      scientificName: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      brandOwner: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      gtinUpc: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      ingredients: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      ndbNumber: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined
      ]),
      additionalDescriptions: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      allHighlightFields: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      score: faker.helpers.arrayElement([
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2
        }),
        undefined
      ])
    })),
    undefined
  ]),
  ...overrideResponse
})

export const getPostFoodsSearchResponseMock = (
  overrideResponse: Partial<SearchResult> = {}
): SearchResult => ({
  foodSearchCriteria: faker.helpers.arrayElement([
    {
      query: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      dataType: faker.helpers.arrayElement([
        faker.helpers.arrayElements([
          'Branded',
          'Foundation',
          'Survey (FNDDS)',
          'SR Legacy'
        ] as const),
        undefined
      ]),
      pageSize: faker.helpers.arrayElement([
        faker.number.int({ min: 1, max: 200 }),
        undefined
      ]),
      pageNumber: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined
      ]),
      sortBy: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          'dataType.keyword',
          'lowercaseDescription.keyword',
          'fdcId',
          'publishedDate'
        ] as const),
        undefined
      ]),
      sortOrder: faker.helpers.arrayElement([
        faker.helpers.arrayElement(['asc', 'desc'] as const),
        undefined
      ]),
      brandOwner: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      tradeChannel: faker.helpers.arrayElement([
        faker.helpers.arrayElements([
          'CHILD_NUTRITION_FOOD_PROGRAMS',
          'DRUG',
          'FOOD_SERVICE',
          'GROCERY',
          'MASS_MERCHANDISING',
          'MILITARY',
          'ONLINE',
          'VENDING'
        ] as const),
        undefined
      ]),
      startDate: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      endDate: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ])
    },
    undefined
  ]),
  totalHits: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined
  ]),
  currentPage: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined
  ]),
  totalPages: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined
  ]),
  foods: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      fdcId: faker.number.int({ min: undefined, max: undefined }),
      dataType: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      description: faker.string.alpha({ length: { min: 10, max: 20 } }),
      foodCode: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      foodNutrients: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          number: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined
          ]),
          name: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined
          ]),
          amount: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2
            }),
            undefined
          ]),
          unitName: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined
          ]),
          derivationCode: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined
          ]),
          derivationDescription: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined
          ])
        })),
        undefined
      ]),
      publicationDate: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      scientificName: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      brandOwner: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      gtinUpc: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      ingredients: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      ndbNumber: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined
      ]),
      additionalDescriptions: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      allHighlightFields: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined
      ]),
      score: faker.helpers.arrayElement([
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2
        }),
        undefined
      ])
    })),
    undefined
  ]),
  ...overrideResponse
})

export const getGetFoodMockHandler = (
  overrideResponse?:
    | GetFood200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<GetFood200> | GetFood200),
  options?: RequestHandlerOptions
) => {
  return http.get(
    '*/v1/food/:fdcId',
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetFoodResponseMock()
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } }
      )
    },
    options
  )
}

export const getGetFoodsMockHandler = (
  overrideResponse?:
    | GetFoods200Item[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<GetFoods200Item[]> | GetFoods200Item[]),
  options?: RequestHandlerOptions
) => {
  return http.get(
    '*/v1/foods',
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetFoodsResponseMock()
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } }
      )
    },
    options
  )
}

export const getPostFoodsMockHandler = (
  overrideResponse?:
    | PostFoods200Item[]
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<PostFoods200Item[]> | PostFoods200Item[]),
  options?: RequestHandlerOptions
) => {
  return http.post(
    '*/v1/foods',
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getPostFoodsResponseMock()
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } }
      )
    },
    options
  )
}

export const getGetFoodsListMockHandler = (
  overrideResponse?:
    | AbridgedFoodItem[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<AbridgedFoodItem[]> | AbridgedFoodItem[]),
  options?: RequestHandlerOptions
) => {
  return http.get(
    '*/v1/foods/list',
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetFoodsListResponseMock()
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } }
      )
    },
    options
  )
}

export const getPostFoodsListMockHandler = (
  overrideResponse?:
    | AbridgedFoodItem[]
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<AbridgedFoodItem[]> | AbridgedFoodItem[]),
  options?: RequestHandlerOptions
) => {
  return http.post(
    '*/v1/foods/list',
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getPostFoodsListResponseMock()
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } }
      )
    },
    options
  )
}

export const getGetFoodsSearchMockHandler = (
  overrideResponse?:
    | SearchResult
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<SearchResult> | SearchResult),
  options?: RequestHandlerOptions
) => {
  return http.get(
    '*/v1/foods/search',
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetFoodsSearchResponseMock()
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } }
      )
    },
    options
  )
}

export const getPostFoodsSearchMockHandler = (
  overrideResponse?:
    | SearchResult
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<SearchResult> | SearchResult),
  options?: RequestHandlerOptions
) => {
  return http.post(
    '*/v1/foods/search',
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getPostFoodsSearchResponseMock()
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } }
      )
    },
    options
  )
}

export const getGetJsonSpecMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<void> | void),
  options?: RequestHandlerOptions
) => {
  return http.get(
    '*/v1/json-spec',
    async (info) => {
      await delay(1000)
      if (typeof overrideResponse === 'function') {
        await overrideResponse(info)
      }
      return new HttpResponse(null, { status: 200 })
    },
    options
  )
}

export const getGetYamlSpecMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<void> | void),
  options?: RequestHandlerOptions
) => {
  return http.get(
    '*/v1/yaml-spec',
    async (info) => {
      await delay(1000)
      if (typeof overrideResponse === 'function') {
        await overrideResponse(info)
      }
      return new HttpResponse(null, { status: 200 })
    },
    options
  )
}
export const getFdcMock = () => [
  getGetFoodMockHandler(),
  getGetFoodsMockHandler(),
  getPostFoodsMockHandler(),
  getGetFoodsListMockHandler(),
  getPostFoodsListMockHandler(),
  getGetFoodsSearchMockHandler(),
  getPostFoodsSearchMockHandler(),
  getGetJsonSpecMockHandler(),
  getGetYamlSpecMockHandler()
]
